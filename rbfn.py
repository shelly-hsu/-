import random
import numpy as np
import array as arr
from math import*

class RBFN():

    def __init__(self):
        self.train_data_filename = "train4D.txt"
        self.train_data = self.get_train_data()
        self.J = 100
        self.learning_rate = 0.1
        self.W,self.V,self.M = self.initial_parameters()

    def get_max_min(self,idx):                                  
        max = -10000; min = 10000
        for i in range(len(self.train_data)):
            if self.train_data[i][idx] > max:                                                     
                max = self.train_data[i][idx]  
            if self.train_data[i][idx] < min:                                                     
                min = self.train_data[i][idx]
        return max,min

    def get_train_data(self):                         
        with open(self.train_data_filename,'r',encoding = 'utf-8') as f:
            lines = f.readlines()     
            train_data=[]                                    
            for strp in lines:
                temp = [float(v) for v in strp.split(' ')]
                train_data.append(temp)
        return train_data

    def initial_parameters(self):
        W = (np.random.random(self.J)-0.5)*2
        V = (np.random.random(self.J))
        M = (np.random.rand(self.J, 3)-0.5)*2
        return W,V,M

    def linear_forward(self,X):
        output_hidden_layer = []
        x_m_distance_sum = []
        x_m_distance = []
        for i in range(0,self.J):
            sum = 0
            x_m_distance_temp_list =[]
            for j in range(3):
                #print("x:",X[j],"M:",self.M[i][j])
                a = X[j]-self.M[i][j]
                #print("a:", a)
                x_m_distance_temp_list.append(a)
                sum += a**2
            #print("sum:",sum)
            x_m_distance.append(x_m_distance_temp_list)
            x_m_distance_sum.append(sum)
            #print("v:",self.V[i])
            y = sum/((-2)*(pow(self.V[i],2)))
            #print(y)
            #print("v:",self.V[i])
            #print(y)
            #print("exp:",np.exp(y))
            output_hidden_layer.append(exp(y))
            #print(exp(-y))
        #print("output_hidden_layer:",output_hidden_layer)
        F = np.dot(output_hidden_layer,self.W)
        #print(F)
        #print("distance:", x_m_distance)
        #print("x_m_distance_sum:", x_m_distance_sum)
        #print("F:",F)
        return x_m_distance,x_m_distance_sum,output_hidden_layer,F
    
     

    def linear_backward(self,d,F,Y,x_m_distance,x_m_distance_sum):
        pre_W = self.W
        pre_V = self.V
        for i in range(self.J):
            self.W[i] = self.W[i] + self.learning_rate*(d-F)*Y[i]       
            self.M[i] = self.M[i] + self.learning_rate*(d-F)*pre_W[i]*Y[i]*(1/(pre_V[i]**2))*np.array(x_m_distance[i])
            self.V[i] = self.V[i] + self.learning_rate*(d-F)*pre_W[i]*Y[i]*(1/(pre_V[i]**3))*x_m_distance_sum[i]

        #print(self.W)
        #print(self.M)
        #print(self.V)
        #print("======================================")
    def get_d_min_max(self):
         return self.d_min, self.d_max

    def get_x_min_max(self):
        return self.x1_min,self.x1_max,self.x2_min,self.x2_max,self.x3_min,self.x3_max

    def rbfn_model(self):
        num_iteration = len(self.train_data)
        #self.x1_max, self.x1_min = self.get_max_min(0)
        #self.x2_max, self.x2_min = self.get_max_min(1)
        #self.x3_max, self.x3_min = self.get_max_min(2)
        #self.d_max, self.d_min = self.get_max_min(3)
        print("initial:")
        print(self.W)
        print(self.V)
        print(self.M)
        #self.x_min_max_list = [self.x1_min,self.x1_max,self.x2_min,self.x2_max,self.x3_min,self.x3_max]
        #print("x_min_max:",self.x_min_max_list)
        #print("======================================")
        for i in range(num_iteration):
            #print("round:", i)
            #print("train_data_i:", self.train_data[i])
            x1 = ((self.train_data[i][0]-0)*(1-(-1))/(80-0))+(-1) 
            x2 = ((self.train_data[i][1]-0)*(1-(-1))/(80-0))+(-1) 
            x3 = ((self.train_data[i][2]-0)*(1-(-1))/(80-0))+(-1)
            d =  ((self.train_data[i][3]-(-40))*(1-(-1))/(40-(-40)))+(-1)  
            X = [x1,x2,x3]
            x_m_distance,x_m_distance_sum, output_hidden_layer,F = self.linear_forward(X)
            if np.isnan(F):
                print("error")
                break 
            self.linear_backward(d,F,output_hidden_layer,x_m_distance,x_m_distance_sum)
        print("end:")
        print("鍵結值:",self.W)
        print("M:",self.M)
        print("變異數",self.V)
        self.W =  [ 0.17902409,  0.17617193,  0.35386498, -0.40736813,  0.85183921,  0.74391538,
  0.39582922, -0.44986599,  0.09310525,  0.12985828,  0.81719161,  0.18255096,
  0.60330218, -0.43541788, -0.81751968, -0.82197132,  0.62541817, -0.5038351,
  0.37274944, -0.29270273, -0.97214665, -0.92349704, -0.25235993,  0.90934296,
 -0.90131294, -0.23456708,  0.34490747, -0.62407,     0.42856886, -0.28803261,
 -0.19709251, -0.63842494, -0.3223178,  -0.64842167,  0.12525742, -0.82090527,
 -0.7648219,  0.42253404, -0.70841781,  0.63803218, -0.90911227, -0.17252746,
  0.99510191, -0.17022279,  0.81151358, -0.45323837,  0.82465281,  0.59214642,
 -0.2896411,  -0.25489208,  0.83091452,  0.52509465, -0.1066492,  -0.86129151,
 -0.21332802, -0.13040444, -0.31336697,  0.88751323, -0.14588741, -0.52616517,
 -0.07570208,  0.55245036,  0.19074756, -0.31936917, -0.77909669, -0.05797058,
 -0.4297068, -0.41165105,  0.45515371, -0.60171946, -0.37424292, -0.83178908,
  0.20529559,  0.03126986, -0.24447196,  0.01441249, -0.68259418,  0.72981553,
  0.75855565, -0.12413036, -0.98688253, -0.26721355, -0.18400099,  0.74419127,
 -0.11533643,  0.50143618,  0.48438092, -0.25371608, -0.72392838, -0.80642915,
 -0.1398561,   0.67991703,  0.07292351, -0.17044322,  0.22043222,  0.08538399,
  0.96987208,  0.07778694,  0.44564857,  0.73929711]
        self.M = [[ 2.29841278e-01, -7.98095270e-01,  4.57235572e-01],
 [ 7.33250183e-03,  6.99271887e-01, -3.29253473e-01],
 [ 4.76287711e-01,  2.27108541e-05, -1.32664874e-02],
 [ 6.80959573e-01,  9.93889829e-01,  4.09908863e-01],
 [ 9.29287262e-01, -9.18488652e-01, -2.76819392e-01],
 [-8.87487043e-01,  7.12676912e-01,  8.65644535e-03],
 [-1.27566093e-01,  7.59817221e-01, -3.11052491e-01],
 [ 2.17218929e-01, -7.42175168e-01,  3.44559243e-01],
 [-2.20736061e-01,  7.24888425e-01,  4.89861440e-01],
 [-3.03393730e-01,  8.24296097e-01, -5.89430480e-01],
 [-8.36288659e-03,  4.25503125e-01, -8.40051302e-01],
 [ 6.15411079e-01, -3.89566152e-01,  8.53951578e-02],
 [ 9.44740424e-01, -7.91040816e-01,  1.12450042e-01],
 [-2.97287582e-02, -8.66881367e-01,  4.27588081e-01],
 [ 1.05390309e-02, -8.61603282e-01, -4.47902188e-01],
 [ 9.95350132e-01, -4.07021954e-01,  4.52642960e-03],
 [ 1.19532007e-01, -8.46469165e-01, -2.82846047e-01],
 [ 4.73956830e-01, -8.86323991e-01,  9.98798941e-01],
 [-2.32091076e-01,  2.48437739e-01,  2.80383329e-01],
 [-4.61368759e-01, -1.59902040e-01,  3.02908144e-01],
 [-4.65974595e-01,  6.26000881e-01,  2.86493973e-01],
 [ 5.92256543e-01,  6.60424873e-01, -6.42269966e-01],
 [ 4.70087317e-01,  5.48940664e-01,  8.35186382e-01],
 [-1.02039433e-02, -7.58970033e-01,  9.84260192e-01],
 [-2.77667549e-01,  2.41028531e-01, -2.39113059e-01],
 [ 6.63007869e-01, -4.67168779e-01,  9.29508836e-01],
 [ 5.39288461e-01,  7.36290455e-01, -5.73917394e-01],
 [ 4.67496217e-01,  1.06468346e-01, -9.27734107e-01],
 [-3.16335754e-01,  9.59558948e-01, -5.33623267e-01],
 [-9.70113841e-01, -8.41291733e-01,  6.75577342e-01],
 [ 4.63140689e-01, -7.84579173e-01, -7.11499739e-01],
 [ 6.64548610e-01,  5.45107272e-01,  6.87423136e-01],
 [ 8.81985630e-01,  8.63695132e-01, -7.56310273e-01],
 [-2.94747749e-01, -1.26531882e-01,  5.68304717e-02],
 [-8.86773583e-01, -9.81646852e-02, -7.29602159e-01],
 [ 4.41986881e-01, -6.51548362e-01,  5.18784752e-01],
 [ 5.81813184e-01, -9.58004809e-01,  5.75012710e-01],
 [ 3.57246151e-01,  2.25727929e-01, -4.59473179e-02],
 [ 8.01776171e-01,  2.58305198e-01,  5.71148124e-01],
 [ 1.58783856e-01, -6.83724894e-01,  2.62519345e-01],
 [ 2.01172286e-01, -8.66999980e-01,  5.15821267e-01],
 [ 4.09105173e-01,  9.67689595e-01,  2.08736914e-01],
 [ 2.45449460e-01, -4.20729952e-02,  8.37584615e-01],
 [-3.01775599e-01,  2.67767284e-01,  5.41188939e-01],
 [-7.36594488e-01, -8.82907032e-01, -1.25713833e-01],
 [-5.13806958e-01,  8.15791011e-01, -3.32576863e-01],
 [-3.02674283e-02,  1.70539649e-01, -1.85627275e-01],
 [-6.53645177e-02, -7.09114888e-01, -2.35919239e-02],
 [-2.47511372e-01,  7.99293145e-01, -7.39941426e-01],
 [-8.95073670e-01, -3.47752560e-01, -9.19159657e-01],
 [ 6.55492561e-01,  7.68246808e-01, -4.62910424e-01],
 [ 8.23044612e-02, -5.13911027e-01, -5.23748244e-01],
 [ 8.23866975e-01,  7.53245127e-01, -4.82179808e-01],
 [-3.49580419e-01, -5.21573457e-01, -3.28080671e-01],
 [ 5.51856143e-01, -1.66559572e-01, -7.49271545e-01],
 [ 3.73186569e-01, -3.59417659e-01, -7.08857872e-01],
 [-3.99638781e-01,  7.17199428e-01, -6.23577727e-01],
 [-8.07383241e-01,  5.44046049e-01,  7.07587876e-01],
 [-4.92912372e-01,  7.53058554e-01, -5.60054622e-01],
 [ 1.09764927e-01, -5.29781207e-02, -3.37013415e-01],
 [-4.63883012e-01, -5.98500286e-01, -4.84550176e-01],
 [-6.48940990e-02, -6.24252390e-01, -3.17209132e-01],
 [-6.92327817e-01,  4.70029062e-01,  1.40554353e-01],
 [-8.52679960e-01,  4.66783453e-01, -7.22914396e-02],
 [ 5.33276094e-02,  8.52743313e-01,  2.07673647e-01],
 [ 4.07492835e-01, -1.13432422e-01, -6.28467080e-01],
 [ 8.87333614e-01,  5.72708095e-01, -3.51266516e-02],
 [-9.58649553e-01,  9.65306720e-01, -1.00942294e-01],
 [ 7.53287864e-01, -2.90846528e-01, -5.81478244e-01],
 [ 1.51024343e-01, -3.81859409e-01, -8.87343709e-01],
 [ 4.82580870e-01,  8.84579178e-01,  1.82046351e-01],
 [-5.69174106e-01,  3.34114080e-02,  6.00396617e-01],
 [ 3.80411867e-01, -5.08722925e-01, -2.92609630e-01],
 [-6.64831656e-01,  5.06739821e-01, -4.84776281e-01],
 [ 3.28966123e-01, -2.25208044e-01, -7.45056621e-01],
 [-3.54099779e-01, -5.72892161e-01,  5.62445894e-01],
 [ 7.80616790e-01, -2.70703873e-01, -4.14256426e-01],
 [-7.69322537e-01,  1.58571141e-01, -3.05891335e-01],
 [-3.49566801e-01,  6.36369118e-01,  9.14440557e-01],
 [-1.45204728e-01, -7.56845133e-01, -4.03856082e-01],
 [-9.75830407e-01,  8.66370714e-01, -1.43318619e-01],
 [ 1.03970261e-02,  1.61632667e-01, -8.39678548e-01],
 [-8.22497565e-01,  7.66842408e-01,  4.78912940e-01],
 [-3.64303108e-01, -1.62702712e-01, -9.28094426e-01],
 [-1.31764649e-01,  6.27465399e-01,  1.12137515e-01],
 [-3.80929649e-01, -4.63091219e-02, -5.36902560e-02],
 [-5.48353549e-01,  4.91427405e-02, -4.97000628e-01],
 [ 7.38820438e-01,  4.95782196e-01, -7.48300809e-01],
 [ 7.96455631e-01, -2.83434947e-01, -4.76341328e-01],
 [-7.76649204e-01,  2.55978467e-01, -9.78129684e-02],
 [-2.33187301e-01,  6.95493515e-01,  4.77368884e-01],
 [ 7.64719394e-01,  6.93284143e-01, -4.81772359e-01],
 [ 1.94778284e-01, -8.03080451e-01,  1.12867264e-01],
 [ 6.23553507e-01,  9.06247600e-01,  1.39174447e-01],
 [-4.50974342e-01,  6.93278434e-01, -8.23880850e-01],
 [ 6.36562165e-01, -1.17899780e-02, -2.61736348e-02],
 [ 7.66951970e-01, -3.12949102e-01, -3.39186707e-03],
 [-5.46480648e-01, -7.34227630e-01, -8.90229731e-01],
 [ 6.95964613e-01,  4.65373671e-01, -2.05124395e-02],
 [ 3.48956391e-01,  5.35909951e-01,  5.53416724e-01]]
        self.V =  [0.7877372,  0.88395871, 0.35442592, 0.22384978, 0.53561309, 0.48736075,
 0.79834364, 0.27364748, 0.80389601, 0.91209584, 0.50361929, 0.51325679,
 0.65192579, 0.10216236, 0.91269,    0.09123445, 0.93499722, 0.7644521,
 0.53870301, 1.00366258, 0.26392477, 0.45700009, 0.06394433, 0.40208929,
 0.06083547, 0.50197937, 0.15415338, 0.15519335, 0.16202111, 0.24587784,
 0.64864369, 0.28117171, 0.53253717, 0.33928176, 0.88917261, 0.63403271,
 0.94838654, 0.09326386, 0.69548057, 0.34877437, 0.6949077,  0.86260068,
 0.25945205, 0.51979338, 0.00551567, 0.72900005, 1.06175631, 0.16233767,
 0.5645708,  0.05327996, 0.24936145, 0.88479877, 0.8240888,  0.07271462,
 0.03688273, 1.01283711, 0.53713237, 0.24720263, 0.29966832, 0.04118526,
 0.87378135, 0.1423466,  0.11356412, 0.7825241,  0.63228192, 0.7016378,
 0.82713503, 0.60706422, 0.46690232, 0.17768829, 0.39035826, 0.66157321,
 0.0775902,  0.52439797, 0.58290804, 0.67063483, 0.34783399, 0.01736879,
 0.09805484, 0.93205171, 0.4393323,  0.07920069, 0.61239602, 0.99258157,
 0.99580874, 0.50849154, 0.97951729, 0.76119834, 0.38956345, 0.32891568,
 0.60155774, 0.88528878, 1.00336624, 0.42419161, 0.73984008, 0.03208447,
 0.4104932,  0.29622125, 0.74153339, 0.24070442]
        return self.W, self.M, self.V

if __name__ == "__main__":
    rbfn = RBFN()
    rbfn.rbfn_model()